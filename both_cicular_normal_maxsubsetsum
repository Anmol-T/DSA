import java.util.*;
public class both_cicular_normal_maxsubsetsum
{
    static int subset(int arr[],int n)
    {
        int p=1,count=0,sum=0,a=0,max=0;
        for(int i=1;i<=n;i++)
        {
            p*=2;
        }
        int arr2[]=new int[p];
        for(int i=0;i<n;i++)
        {
            while(a<n-i)
            {
            for(int j=i;j<=i+a;j++)
            {
                if(j<n)
                    sum+=arr[j];
            }
            if(sum>max)
                max=sum;
            a++;
            sum=0;
            }
            a=0;
        }
        return max;
    }
    static int circular(int arr[],int n1)
    {
        int c=0,a=0,sum=0,max=0;
        for(int i=1;i<n1;i++)
        {
            for(int j=i;j<=n1;j++)
            {
                if(j>=n1)
                {
                    while((i-a)!=0)
                    {
                    for(int x=i;x<n1;x++)
                    {
                        sum+=arr[x];
                    }
                    for(int k=0;k<i-a;k++)
                    {
                        sum+=arr[k];
                    }
                    if(sum>max)
                        max=sum;
                    sum=0;
                    a++;
                }
                }
                }
            sum=0;
            a=0;
        }
        return max;
    }
        public static void main(String[] args)
        {
            int max1=0,max2=0;
            Scanner sc=new Scanner(System.in);
            System.out.println("Enter the size of array");
            int n=sc.nextInt();
            int arr[]=new int[n];
            System.out.println("Enter the elements of array");
            for(int i=0;i<n;i++)
            {
                arr[i]=sc.nextInt();
            }
            max1=subset(arr,n);
            max2=circular(arr,n);
            if(max1>max2)
                System.out.print(max1);
            else
                System.out.print(max2);
        }
    }
